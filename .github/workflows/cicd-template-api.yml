name: CI/CD Template API
on:
  push:
    tags:
      - "template-api/v*.*.*"
  pull_request:
    types: [closed]
    branches:
      - main

env:
  APP_NAME: template-api
  APP_IMAGE: neuratek/template-api
  GITOPS_REPO: Neuratek-ai/k8s-manifests

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Environment
        id: set-env
        run: |
          if [[ ${{ startsWith(github.ref, 'refs/tags/') }} == 'true' ]]; then
            if [[ ${{ github.ref }} =~ .*-rc$ ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            else
              echo "environment=prod" >> $GITHUB_OUTPUT
            fi
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Set Version
        id: set-version
        run: |
          echo "github.ref : ${{ github.ref }}"  
          echo "github.ref_name : ${{ github.ref_name }}"

          if [[ ${{ startsWith(github.ref, 'refs/tags//${{ env.APP_NAME }}/v*') }} == 'true' ]]; then
            if [[ ${{ github.ref }} =~ .*-rc[1-9]?$ ]]; then
              VERSION=staging-$(echo ${{ github.ref_name }} | sed 's/.*\/v/v/')
            else
              VERSION=$(echo ${{ github.ref_name }} | sed 's/.*\/v/v/')
            fi

          else
            if [[ ${{ startsWith(github.ref, 'refs/heads/staging') }} == 'true' ]]; then
              VERSION=staging-${GITHUB_SHA:0:7}
            else
              VERSION=dev-${GITHUB_SHA:0:7}
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Debug Environment Info
        run: |
          echo "Environment: ${{ steps.set-env.outputs.environment }}"
          echo "Version: ${{ steps.set-version.outputs.version }}"

  lint:
    name: Lint with Ruff
    needs: determine-environment
    if: needs.determine-environment.outputs.environment != 'prod'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
        with:
          src: "./${{env.APP_NAME}}"

  test:
    name: Run tests
    needs: [determine-environment, lint]
    if: needs.determine-environment.outputs.environment != 'prod'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          cd ${{env.APP_NAME}}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          cd ${{env.APP_NAME}}
          pytest

  build:
    needs: [determine-environment, lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_SECRET }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:${{env.APP_NAME}}"
          tags: |
            ${{env.APP_IMAGE}}:${{ needs.determine-environment.outputs.version }}
            ${{env.APP_IMAGE}}:latest
          platforms: linux/amd64
          cache-from: |
            type=registry,ref=${{env.APP_IMAGE}}:buildcache
          cache-to: type=registry,ref=${{env.APP_IMAGE}}:buildcache,mode=max
          push: true

  deploy:
    needs: [determine-environment, build]
    runs-on: ubuntu-latest
    environment: ${{needs.determine-environment.outputs.environment}}
    concurrency:
      group: deploy-${{ needs.determine-environment.outputs.environment }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{env.GITOPS_REPO}}
          token: ${{secrets.GH_PAT}}
          ref: main
          fetch-depth: 0

      - name: Update image version in manifest
        run: |
          git fetch origin
          git merge origin/main
          cd envs/${{needs.determine-environment.outputs.environment}}/${{env.APP_NAME}}
          if [ ! -d "." ]; then
            echo "Error: Directory does not exist"
            exit 1
          fi
          SHA_VERSION=${{ needs.determine-environment.outputs.version }}

          if ! sed -i "s|${{env.APP_IMAGE}}:[^ ]*|${{env.APP_IMAGE}}:$SHA_VERSION|" deployment.yaml; then
            echo "Error updating deployment.yaml"
            exit 1
          fi
          if ! sed -i "s|VERSION: \".*\"|VERSION: \"${SHA_VERSION}\"|" configmap.yaml; then
            echo "Error updating configmap.yaml"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          SHA_VERSION=${{ needs.determine-environment.outputs.version }}
          git add envs/${{needs.determine-environment.outputs.environment}}/${{env.APP_NAME}}/deployment.yaml envs/${{needs.determine-environment.outputs.environment}}/${{env.APP_NAME}}/configmap.yaml
          git commit -m "Update image version in ${{env.APP_IMAGE}}:${SHA_VERSION}"
          git push origin main || {
            git pull --rebase origin main
            git push origin main
          } 